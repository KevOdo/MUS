@page "/game"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorCardGame.Shared
@inject NavigationManager Navigation
@inject PlayerService PlayerService

<h3>Multiplayer Card Game</h3>

@if (!connected)
{
    <p>Connecting...</p>
}
else if (string.IsNullOrWhiteSpace(PlayerService.PlayerName))
{
    <div>
        <label>Enter your name: </label>
        <input @bind="playerNameInput" placeholder="Your name" />
        <button @onclick="SetPlayerName">Continue</button>
    </div>
}
else
{
    <p>Connected as <b>@PlayerService.PlayerName</b> (<span style="font-size:small">@PlayerService.PlayerId</span>)</p>

    <div>
        <input @bind="newGameName" placeholder="Game name" style="width:200px;" />
        <button @onclick="CreateGame">Create New Game</button>
        <span style="margin-left:1em;">@((currentGameId != null) ? $"Current Game: {currentGameId} ({currentGameName})" : "")</span>
    </div>
    <div style="margin-top:1em;">
        <button @onclick="LoadGames">Refresh Game List</button>
        <h5>Available Games:</h5>
        <ul>
            @foreach (var g in availableGames)
            {
                <li>
                    <b>@g.Name</b> <span style="font-size:small;color:gray">(@g.GameId)</span>
                    <button @onclick="() => JoinGame(g.GameId)">Join</button>
                </li>
            }
        </ul>
    </div>
    <div style="margin-top:1em;">
        <input @bind="card" placeholder="Card to play (e.g., 7H)" />
        <button @onclick="PlayCard" disabled="@(currentGameId == null)">Play</button>
    </div>

    <h4>Players:</h4>
    <ul>
        @foreach (var p in players)
        {
            <li>@p</li>
        }
    </ul>

    <h4>Messages:</h4>
    <ul>
        @foreach (var msg in messages)
        {
            <li>@msg</li>
        }
    </ul>
    @if (!string.IsNullOrEmpty(error))
    {
        <p style="color:red">@error</p>
    }
}

@code {
    private HubConnection? hub;
    private bool connected = false;
    private List<string> messages = new();
    private List<string> players = new();
    private string card = "";
    private string error = string.Empty;
    private string playerNameInput = "";
    private string? currentGameId = null;
    private string? currentGameName = null;
    private string newGameName = "";
    private List<GameInfo> availableGames = new();

    public class GameInfo
    {
        public string GameId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        hub.On<string>("PlayerRegistered", id => {
            messages.Add($"Player ID registered: {id}");
            InvokeAsync(StateHasChanged);
        });

        hub.On<string>("PlayerJoined", id => {
            messages.Add($"Player joined: {id}");
            InvokeAsync(StateHasChanged);
        });

        hub.On<string, string>("CardPlayed", (player, card) => {
            messages.Add($"{player} played: {card}");
            InvokeAsync(StateHasChanged);
        });

        hub.On<string>("JoinFailed", msg => {
            error = msg;
            InvokeAsync(StateHasChanged);
        });

        hub.On<string[]>("PlayerList", list => {
            players = list.ToList();
            InvokeAsync(StateHasChanged);
        });

        hub.On<string, string>("GameCreated", (gid, gname) => {
            currentGameId = gid;
            currentGameName = gname;
            messages.Add($"Game created: {gname} ({gid})");
            InvokeAsync(StateHasChanged);
        });

        await hub.StartAsync();
        connected = true;
        // Don't register until name is set
        if (!string.IsNullOrWhiteSpace(PlayerService.PlayerName))
        {
            await RegisterPlayer();
        }
    }

    private async Task SetPlayerName()
    {
        if (!string.IsNullOrWhiteSpace(playerNameInput))
        {
            PlayerService.PlayerName = playerNameInput.Trim();
            await RegisterPlayer();
            StateHasChanged();
        }
    }

    private async Task RegisterPlayer()
    {
        await hub.InvokeAsync("RegisterPlayer", PlayerService.PlayerId, PlayerService.PlayerName);
    }

    private async Task CreateGame()
    {
        error = string.Empty;
        if (string.IsNullOrWhiteSpace(newGameName))
        {
            error = "Please enter a game name.";
            return;
        }
        var gid = await hub.InvokeAsync<string>("CreateGame", newGameName);
        currentGameId = gid;
        currentGameName = newGameName;
        await JoinGame(gid);
    }

    private async Task LoadGames()
    {
        var games = await hub.InvokeAsync<GameInfo[]>("ListAvailableGames");
        availableGames = games.ToList();
        StateHasChanged();
    }

    private async Task JoinGame(string gid)
    {
        error = string.Empty;
        var game = availableGames.FirstOrDefault(g => g.GameId == gid);
        currentGameId = gid;
        currentGameName = game?.Name;
        await hub.InvokeAsync("JoinGame", gid);
    }

    private async Task PlayCard()
    {
        if (currentGameId != null)
            await hub.InvokeAsync("PlayCard", currentGameId, card);
    }
}
